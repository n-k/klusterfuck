/*
 * API
 * API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.nk.klusterfuck.client;

import com.github.nk.klusterfuck.ApiException;
import com.github.nk.klusterfuck.client.model.CreateFunctionRequest;
import com.github.nk.klusterfuck.client.model.KFFunction;
import com.github.nk.klusterfuck.client.model.ProxyResponse;
import com.github.nk.klusterfuck.client.model.Service;
import com.github.nk.klusterfuck.client.model.Version;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FunctionsApi
 */
@Ignore
public class FunctionsApiTest {

    private final FunctionsApi api = new FunctionsApi();

    
    /**
     * create
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        CreateFunctionRequest body = null;
        KFFunction response = api.create(body);

        // TODO: test validations
    }
    
    /**
     * delete
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String id = null;
        api.delete(id);

        // TODO: test validations
    }
    
    /**
     * get
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String id = null;
        KFFunction response = api.get(id);

        // TODO: test validations
    }
    
    /**
     * getAddress
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServiceTest() throws ApiException {
        String id = null;
        Service response = api.getService(id);

        // TODO: test validations
    }
    
    /**
     * getVersions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionTest() throws ApiException {
        String id = null;
        String versionId = null;
        Version response = api.getVersion(id, versionId);

        // TODO: test validations
    }
    
    /**
     * getVersions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsTest() throws ApiException {
        String id = null;
        List<Version> response = api.getVersions(id);

        // TODO: test validations
    }
    
    /**
     * list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        List<KFFunction> response = api.list();

        // TODO: test validations
    }
    
    /**
     * proxy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void proxyTest() throws ApiException {
        String id = null;
        String body = null;
        ProxyResponse response = api.proxy(id, body);

        // TODO: test validations
    }
    
    /**
     * setVersion
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setVersionTest() throws ApiException {
        String id = null;
        String versionId = null;
        Map<String, String> response = api.setVersion(id, versionId);

        // TODO: test validations
    }
    
}
