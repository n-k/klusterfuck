kind: Namespace
apiVersion: v1
metadata:
  name: klusterfuck
  labels:
    name: klusterfuck
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: klusterfuck
  namespace: klusterfuck
  labels:
    component: klusterfuck
spec:
  replicas: 0
  selector:
    app: klusterfuck
    component: klusterfuck
  template:
    metadata:
      labels:
        app: klusterfuck
        component: klusterfuck
    spec:
      containers:
      - name: klusterfuck
        securityContext:
          privileged: true
        image: nipun/klusterfuck-admin:0.2.1
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /index.html
            port: 8080
            scheme: HTTP
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AGENT_IMAGE
            value: "nipun/klusterfuck-agent:0.2.1"
          - name: FLOW_IMAGE
            value: "nipun/klusterfuck-flow:0.2.1"
          - name: "KEYCLOAK_URL"
            value: "http://keycloak.klusterfuck.svc.cluster.local/auth"
          - name: "KEYCLOAK_REALM"
            value: "master"
          - name: "KEYCLOAK_CLIENT_ID"
            value: "klusterfuck"
          - name: KEYCLOAK_ADMIN_USER
            value: "admin"
          - name: KEYCLOAK_ADMIN_PASSWORD
            value: "admin"
        ports:
          - containerPort: 8080
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 500m
            memory: 500Mi
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: keycloak
  namespace: klusterfuck
  labels:
    component: keycloak
spec:
  replicas: 1
  selector:
    app: keycloak
    component: keycloak
  template:
    metadata:
      labels:
        app: keycloak
        component: keycloak
    spec:
      containers:
      - name: keycloak
        image: jboss/keycloak
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /auth
            port: 8080
            scheme: HTTP
        env:
          - name: KEYCLOAK_USER
            value: "admin"
          - name: KEYCLOAK_PASSWORD
            value: "admin"
        ports:
          - containerPort: 8080
        resources:
          limits:
            cpu: 1000m
            memory: 1000Mi
          requests:
            cpu: 1000m
            memory: 1000Mi
---
apiVersion: v1
kind: Service
metadata:
  name: klusterfuck
  namespace: klusterfuck
  labels:
    app: klusterfuck
    component: klusterfuck
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: klusterfuck
    component: klusterfuck
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: klusterfuck
  labels:
    app: keycloak
    component: keycloak
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: keycloak
    component: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: klusterfuck
spec:
  ports:
  - name: pgql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: postgres
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: postgres
  namespace: klusterfuck
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:9.4
          env:
            - name: POSTGRES_USER
              value: kong
            - name: POSTGRES_PASSWORD
              value: kong
            - name: POSTGRES_DB
              value: kong
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          resources:
            limits:
              cpu: 100m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pg-data
      volumes:
        - name: pg-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: klusterfuck
spec:
  ports:
  - name: kong-proxy
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: kong-proxy-ssl
    port: 8443
    targetPort: 8443
    protocol: TCP
  selector:
    app: kong
---
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: klusterfuck
spec:
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app: kong
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kong-rc
  namespace: klusterfuck
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: kong-rc
        app: kong
    spec:
      containers:
      - name: kong
        image: kong
        env:
          - name: KONG_PG_PASSWORD
            value: kong
          - name: KONG_PG_HOST
            value: postgres.klusterfuck.svc.cluster.local
          - name: KONG_HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
        command: [ "/bin/sh", "-c", "KONG_CLUSTER_ADVERTISE=$(KONG_HOST_IP):7946 KONG_NGINX_DAEMON='off' kong start" ]
        ports:
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP
        - name: surf-tcp
          containerPort: 7946
          protocol: TCP
        - name: surf-udp
          containerPort: 7946
          protocol: UDP
#        resources:
#          limits:
#            cpu: 400m
#            memory: 400Mi
#          requests:
#            cpu: 400m
#            memory: 400Mi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kong-dashboard
  namespace: klusterfuck
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: kong-dashboard
        app: kong-dashboard
    spec:
      containers:
      - name: kong-dashboard
        image: pgbi/kong-dashboard
        ports:
        - name: ui
          containerPort: 8080
          protocol: TCP
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 200m
            memory: 200Mi
---
apiVersion: v1
kind: Service
metadata:
  name: kong-dashboard
  namespace: klusterfuck
spec:
  ports:
  - name: kong-dashboard
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: kong-dashboard
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: klusterfuck
  namespace: klusterfuck
spec:
  rules:
  - host: klusterfuck.kube.local
    http:
      paths:
      - path: /
        backend:
          serviceName: klusterfuck
          servicePort: 80
